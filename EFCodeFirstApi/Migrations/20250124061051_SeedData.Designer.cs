// <auto-generated />
using System;
using EFCodeFirstApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCodeFirstApi.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20250124061051_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFCodeFirstApi.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Books"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Toys"
                        });
                });

            modelBuilder.Entity("EFCodeFirstApi.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastRestocked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Price = 699.99m,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Description = "High performance laptop",
                            Name = "Laptop",
                            Price = 999.99m,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            Description = "Cotton T-Shirt",
                            Name = "T-Shirt",
                            Price = 19.99m,
                            Stock = 100
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            Description = "Denim jeans",
                            Name = "Jeans",
                            Price = 49.99m,
                            Stock = 80
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 3,
                            Description = "High-speed blender",
                            Name = "Blender",
                            Price = 89.99m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 4,
                            Description = "Delicious recipes",
                            Name = "Cookbook",
                            Price = 24.99m,
                            Stock = 60
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 5,
                            Description = "Collectible action figure",
                            Name = "Action Figure",
                            Price = 14.99m,
                            Stock = 200
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1,
                            Description = "Noise-cancelling headphones",
                            Name = "Wireless Headphones",
                            Price = 199.99m,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 1,
                            Description = "Next-gen gaming console",
                            Name = "Gaming Console",
                            Price = 499.99m,
                            Stock = 15
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            Description = "Warm sweater",
                            Name = "Sweater",
                            Price = 39.99m,
                            Stock = 70
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 3,
                            Description = "Compact microwave",
                            Name = "Microwave",
                            Price = 129.99m,
                            Stock = 35
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4,
                            Description = "Bestselling novel",
                            Name = "Novel",
                            Price = 15.99m,
                            Stock = 90
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 5,
                            Description = "1000-piece puzzle",
                            Name = "Puzzle",
                            Price = 19.99m,
                            Stock = 150
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 1,
                            Description = "Fitness smartwatch",
                            Name = "Smartwatch",
                            Price = 249.99m,
                            Stock = 20
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 2,
                            Description = "Winter jacket",
                            Name = "Jacket",
                            Price = 89.99m,
                            Stock = 40
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 3,
                            Description = "Automatic coffee maker",
                            Name = "Coffee Maker",
                            Price = 79.99m,
                            Stock = 30
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 4,
                            Description = "Inspirational biography",
                            Name = "Biography",
                            Price = 22.99m,
                            Stock = 50
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 5,
                            Description = "Fun board game",
                            Name = "Board Game",
                            Price = 29.99m,
                            Stock = 60
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 1,
                            Description = "Portable tablet",
                            Name = "Tablet",
                            Price = 299.99m,
                            Stock = 25
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 2,
                            Description = "Comfortable shorts",
                            Name = "Shorts",
                            Price = 24.99m,
                            Stock = 80
                        });
                });

            modelBuilder.Entity("EFCodeFirstApi.ProductSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSuppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 4,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 5,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 6,
                            ProductId = 6,
                            SupplierId = 6
                        },
                        new
                        {
                            Id = 7,
                            ProductId = 7,
                            SupplierId = 7
                        },
                        new
                        {
                            Id = 8,
                            ProductId = 8,
                            SupplierId = 8
                        },
                        new
                        {
                            Id = 9,
                            ProductId = 9,
                            SupplierId = 9
                        },
                        new
                        {
                            Id = 10,
                            ProductId = 10,
                            SupplierId = 10
                        });
                });

            modelBuilder.Entity("EFCodeFirstApi.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("SupplierId");

                    b.HasIndex("Name");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            ContactEmail = "supplierA@example.com",
                            Name = "Supplier A",
                            Phone = 1234567890
                        },
                        new
                        {
                            SupplierId = 2,
                            ContactEmail = "supplierB@example.com",
                            Name = "Supplier B",
                            Phone = 1234567891
                        },
                        new
                        {
                            SupplierId = 3,
                            ContactEmail = "supplierC@example.com",
                            Name = "Supplier C",
                            Phone = 1234567892
                        },
                        new
                        {
                            SupplierId = 4,
                            ContactEmail = "supplierD@example.com",
                            Name = "Supplier D",
                            Phone = 1234567893
                        },
                        new
                        {
                            SupplierId = 5,
                            ContactEmail = "supplierE@example.com",
                            Name = "Supplier E",
                            Phone = 1234567894
                        },
                        new
                        {
                            SupplierId = 6,
                            ContactEmail = "supplierF@example.com",
                            Name = "Supplier F",
                            Phone = 1234567895
                        },
                        new
                        {
                            SupplierId = 7,
                            ContactEmail = "supplierG@example.com",
                            Name = "Supplier G",
                            Phone = 1234567896
                        },
                        new
                        {
                            SupplierId = 8,
                            ContactEmail = "supplierH@example.com",
                            Name = "Supplier H",
                            Phone = 1234567897
                        },
                        new
                        {
                            SupplierId = 9,
                            ContactEmail = "supplierI@example.com",
                            Name = "Supplier I",
                            Phone = 1234567898
                        },
                        new
                        {
                            SupplierId = 10,
                            ContactEmail = "supplierJ@example.com",
                            Name = "Supplier J",
                            Phone = 1234567899
                        });
                });

            modelBuilder.Entity("EFCodeFirstApi.Product", b =>
                {
                    b.HasOne("EFCodeFirstApi.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EFCodeFirstApi.ProductSupplier", b =>
                {
                    b.HasOne("EFCodeFirstApi.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCodeFirstApi.Supplier", "Supplier")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("EFCodeFirstApi.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EFCodeFirstApi.Product", b =>
                {
                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("EFCodeFirstApi.Supplier", b =>
                {
                    b.Navigation("ProductSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
